let handler = (m, { usedPrefix, command, text }) => {
    if (!text) return m.reply(`Ù…Ø«Ø§Ù„:\n${usedPrefix + command} 2003 02 25`)

    const date = new Date(text)
    if (isNaN(date.getTime())) return m.reply('*ØªØ§Ø±ÙŠØ® ØºÙŠØ± ØµØ§Ù„Ø­ØŒ Ø¬Ø±Ø¨ Ø¨Ø§Ù„Ø´ÙƒÙ„ Ø§Ù„ØªØ§Ù„ÙŠ: Ø³Ù†Ø© Ø´Ù‡Ø± ÙŠÙˆÙ…* Ù…Ø«Ø§Ù„: *2005 07 07*')
    
    const d = new Date()
    const [Ø§Ù„Ø³Ù†Ø©, Ø§Ù„Ø´Ù‡Ø±, Ø§Ù„ÙŠÙˆÙ…] = [d.getFullYear(), d.getMonth() + 1, d.getDate()]
    const birth = [date.getFullYear(), date.getMonth() + 1, date.getDate()]
    
    const zodiac = getZodiac(birth[1], birth[2])
    const ageD = new Date(d - date)
    const age = ageD.getFullYear() - new Date(1970, 0, 1).getFullYear()

    const birthday = [Ø§Ù„Ø³Ù†Ø© + (birth[1] < Ø§Ù„Ø´Ù‡Ø±), ...birth.slice(1)]
    const cekusia = Ø§Ù„Ø´Ù‡Ø± === birth[1] && Ø§Ù„ÙŠÙˆÙ… === birth[2] ? `${age} - ÙƒÙ„ Ø³Ù†Ø© ÙˆØ§Ù†Øª Ø·ÙŠØ¨ ðŸ¥³` : age

    const teks = `
ØªØ§Ø±ÙŠØ® Ø§Ù„Ù…ÙŠÙ„Ø§Ø¯: ${birth.join('-')}
Ø¹ÙŠØ¯ Ø§Ù„Ù…ÙŠÙ„Ø§Ø¯ Ø§Ù„Ø¬Ø§ÙŠ: ${birthday.join('-')}
Ø§Ù„Ø³Ù†: ${cekusia}
Ø§Ù„Ø¨Ø±Ø¬: ${zodiac}
`.trim()
    m.reply(teks)
}

handler.help = ['zodiac *2002 02 25*']
handler.tags = ['tools']
//handler.limit = 1
//handler.register = true 
handler.command = /^Ø¨Ø±Ø¬ÙŠ$/i

export default handler

const zodiak = [
    ["Ø§Ù„Ø¬Ø¯ÙŠ", new Date(1970, 0, 1)],
    ["Ø§Ù„Ø¯Ù„Ùˆ", new Date(1970, 0, 20)],
    ["Ø§Ù„Ø­ÙˆØª", new Date(1970, 1, 19)],
    ["Ø§Ù„Ø­Ù…Ù„", new Date(1970, 2, 21)],
    ["Ø§Ù„Ø«ÙˆØ±", new Date(1970, 3, 21)],
    ["Ø§Ù„Ø¬ÙˆØ²Ø§Ø¡", new Date(1970, 4, 21)],
    ["Ø§Ù„Ø³Ø±Ø·Ø§Ù†", new Date(1970, 5, 22)],
    ["Ø§Ù„Ø£Ø³Ø¯", new Date(1970, 6, 23)],
    ["Ø§Ù„Ø¹Ø°Ø±Ø§Ø¡", new Date(1970, 7, 23)],
    ["Ø§Ù„Ù…ÙŠØ²Ø§Ù†", new Date(1970, 8, 23)],
    ["Ø§Ù„Ø¹Ù‚Ø±Ø¨", new Date(1970, 9, 23)],
    ["Ø§Ù„Ù‚ÙˆØ³", new Date(1970, 10, 22)],
    ["Ø§Ù„Ø¬Ø¯ÙŠ", new Date(1970, 11, 22)]
].reverse()

function getZodiac(month, day) {
    let d = new Date(1970, month - 1, day)
    return zodiak.find(([_,_d]) => d >= _d)[0]
      }
